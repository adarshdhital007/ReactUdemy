# Creating an event

import React from 'react';

class Display extends React.Component {
  show(evt) {
    alert('Button Clicked!');
    // You can put your code here to handle the click event
  }

  render() {
    return (
      <div onClick={this.show}>Click Me!</div>
    );
  }
}

class App extends React.Component {
  render() {
    return (
      <div>
        <h1>React Click Event Example</h1>
        <Display />
      </div>
    );
  }
}

export default App;




# LifeCycle Methods

import React, { Component } from 'react';

class LifecycleDemo extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: 0,
    };
  }

  // componentWillMount is deprecated in React 16.3 and removed in React 17
  // You can use constructor or componentDidMount for similar functionality
  // componentDidMount() {
  //   console.log('componentWillMount - Executed just before rendering');
  // }

  componentDidMount() {
    console.log('componentDidMount - Executed on the client side after the first render');
  }

  componentWillReceiveProps(nextProps) {
    console.log('componentWillReceiveProps - Received props:', nextProps);
  }

  shouldComponentUpdate(nextProps, nextState) {
    console.log('shouldComponentUpdate - Next props:', nextProps);
    console.log('shouldComponentUpdate - Next state:', nextState);
    // Return true or false based on certain conditions
    // For demonstration, always return true
    return true;
  }

  componentWillUpdate(nextProps, nextState) {
    console.log('componentWillUpdate - Next props:', nextProps);
    console.log('componentWillUpdate - Next state:', nextState);
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate - Previous props:', prevProps);
    console.log('componentDidUpdate - Previous state:', prevState);
  }

  componentWillUnmount() {
    console.log('componentWillUnmount - Component is unmounted');
  }

  updateState = () => {
    this.setState({ data: this.state.data + 1 });
  }

  render() {
    console.log('render - Rendered');
    return (
      <div>
        <h1>React Lifecycle Methods Demo</h1>
        <p>Data: {this.state.data}</p>
        <button onClick={this.updateState}>Update State</button>
      </div>
    );
  }
}

export default LifecycleDemo;



# This keyword

import React, { Component } from 'react';

class ThisDemo extends Component {
  constructor() {
    super();
    this.state = {
      message: 'Hello, React!',
      count: 0,
    };
    // Binding this explicitly in the constructor
    this.handleClick = this.handleClick.bind(this);
  }

  componentDidMount() {
    // Accessing this within componentDidMount
    console.log('ComponentDidMount this.state.message:', this.state.message);
  }

  handleClick() {
    // Using this within a bound method
    this.setState({ count: this.state.count + 1 });
  }

  render() {
    return (
      <div>
        <p>{this.state.message}</p>
        <p>Count: {this.state.count}</p>
        <button onClick={this.handleClick}>Increment Count</button>
      </div>
    );
  }
}

export default ThisDemo;


//Fetch API

import React, { useState } from 'react';

function App() {
  const [content, setContent] = useState('');
  
  const loadDoc = async () => {
    try {
      const response = await fetch('ajax_info.txt');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.text();
      setContent(data);
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div id="demo">
      <h2>The Fetch API in React</h2>
      <button type="button" onClick={loadDoc}>Change Content</button>
      <div>{content}</div>
    </div>
  );
}

export default App;


//AJAX 

import React, { Component } from 'react';

class App extends Component {
  constructor() {
    super();
    this.state = {
      content: ''
    };
  }

  loadDoc = () => {
    const xhttp = new XMLHttpRequest();
    xhttp.onload = () => {
      if (xhttp.status === 200) {
        this.setState({ content: xhttp.responseText });
      } else {
        console.error('Request failed with status:', xhttp.status);
      }
    };
    xhttp.open('GET', 'ajax_info.txt');
    xhttp.send();
  };

  render() {
    return (
      <div id="demo">
        <h2>The XMLHttpRequest Object with React</h2>
        <button type="button" onClick={this.loadDoc}>Change Content</button>
        <div>{this.state.content}</div>
      </div>
    );
  }
}

export default App;

